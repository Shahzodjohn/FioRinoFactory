
///
/// generated by SPToCore on 09/10/2021 14:37:46
///

using System;
using System.Data;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using FioRinoFactory.Data;

namespace FioRinoFactory.Model
{
    public partial class SPToCoreContext : FioAndRinoContext
    {
        private DbSet<EXPOSE_dm_OrderArchievum_SelectingALLFormAchievumResult> EXPOSE_dm_OrderArchievum_SelectingALLFormAchievum { get; set; }
        private DbSet<EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuResult> EXPOSE_dm_OrderProducts_DetailProductListStanMagazynu { get; set; }
        private DbSet<EXPOSE_dm_OrderProducts_GetOrderDetailResult> EXPOSE_dm_OrderProducts_GetOrderDetail { get; set; }
        private DbSet<EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderResult> EXPOSE_dm_OrderProducts_OpenningTheSpecificOrder { get; set; }
        private DbSet<EXPOSE_dm_OrderProducts_PersonalWzDetailsResult> EXPOSE_dm_OrderProducts_PersonalWzDetails { get; set; }
        private DbSet<EXPOSE_dm_OrderProducts_SelectingProductsAfterScanningResult> EXPOSE_dm_OrderProducts_SelectingProductsAfterScanning { get; set; }
        private DbSet<EXPOSE_dm_Orders_SelectingAllNewOrdersResult> EXPOSE_dm_Orders_SelectingAllNewOrders { get; set; }
        private DbSet<EXPOSE_dm_Products_SearchingByNameCategoryAndSizeResult> EXPOSE_dm_Products_SearchingByNameCategoryAndSize { get; set; }
        private DbSet<EXPOSE_dm_Products_SelectingCurrentOrderByStatusResult> EXPOSE_dm_Products_SelectingCurrentOrderByStatus { get; set; }
        private DbSet<EXPOSE_dm_Products_SelectingProductGtinResult> EXPOSE_dm_Products_SelectingProductGtin { get; set; }
        private DbSet<EXPOSE_dm_WzMagazyn_ListOfWzOrdersInWZMAGAZYNResult> EXPOSE_dm_WzMagazyn_ListOfWzOrdersInWZMAGAZYN { get; set; }
        private DbSet<SaveMessageResult> SaveMessage { get; set; }
        private DbSet<SaveOutgoingMessageResult> SaveOutgoingMessage { get; set; }

        public SPToCoreContext()
        {
        }

        public SPToCoreContext(DbContextOptions<FioAndRinoContext> options)
            : base(options)
        {
        }               

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {            
            // No key            
            modelBuilder.Entity<EXPOSE_dm_OrderArchievum_SelectingALLFormAchievumResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_OrderProducts_GetOrderDetailResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_OrderProducts_PersonalWzDetailsResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_OrderProducts_SelectingProductsAfterScanningResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Orders_SelectingAllNewOrdersResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Products_SearchingByNameCategoryAndSizeResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Products_SelectingCurrentOrderByStatusResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Products_SelectingProductGtinResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_WzMagazyn_ListOfWzOrdersInWZMAGAZYNResult>().HasNoKey();
            modelBuilder.Entity<SaveMessageResult>().HasNoKey();
            modelBuilder.Entity<SaveOutgoingMessageResult>().HasNoKey();
            //Thanks Valecass!!!
            base.OnModelCreating(modelBuilder);
        }

        public void ChangeAutoStatusOutgoingMessage(int? ID,bool? NoAuto)
        {

                // Parameters
                SqlParameter p_ID = new SqlParameter("@ID", ID ?? (object)DBNull.Value);
                p_ID.Direction = ParameterDirection.Input;
                p_ID.DbType = DbType.Int32;
                p_ID.Size = 4;

                SqlParameter p_NoAuto = new SqlParameter("@NoAuto", NoAuto ?? (object)DBNull.Value);
                p_NoAuto.Direction = ParameterDirection.Input;
                p_NoAuto.DbType = DbType.Boolean;
                p_NoAuto.Size = 1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[ChangeAutoStatusOutgoingMessage] @ID, @NoAuto";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_ID , p_NoAuto );

            //Return
        }

        public void ChangeColumnProperty(string TableName,string ColumnName,string PropertyName,string PropertyValue)
        {

                // Parameters
                SqlParameter p_TableName = new SqlParameter("@TableName", TableName ?? (object)DBNull.Value);
                p_TableName.Direction = ParameterDirection.Input;
                p_TableName.DbType = DbType.String;
                p_TableName.Size = 256;

                SqlParameter p_ColumnName = new SqlParameter("@ColumnName", ColumnName ?? (object)DBNull.Value);
                p_ColumnName.Direction = ParameterDirection.Input;
                p_ColumnName.DbType = DbType.String;
                p_ColumnName.Size = 256;

                SqlParameter p_PropertyName = new SqlParameter("@PropertyName", PropertyName ?? (object)DBNull.Value);
                p_PropertyName.Direction = ParameterDirection.Input;
                p_PropertyName.DbType = DbType.String;
                p_PropertyName.Size = 256;

                SqlParameter p_PropertyValue = new SqlParameter("@PropertyValue", PropertyValue ?? (object)DBNull.Value);
                p_PropertyValue.Direction = ParameterDirection.Input;
                p_PropertyValue.DbType = DbType.String;
                p_PropertyValue.Size = 2048;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[ChangeColumnProperty] @TableName, @ColumnName, @PropertyName, @PropertyValue";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_TableName , p_ColumnName , p_PropertyName , p_PropertyValue );

            //Return
        }

        public void ChangeDeliveryStatusIncomingMessage(string MessageId,Byte? State)
        {

                // Parameters
                SqlParameter p_MessageId = new SqlParameter("@MessageId", MessageId ?? (object)DBNull.Value);
                p_MessageId.Direction = ParameterDirection.Input;
                p_MessageId.DbType = DbType.String;
                p_MessageId.Size = 1024;

                SqlParameter p_State = new SqlParameter("@State", State ?? (object)DBNull.Value);
                p_State.Direction = ParameterDirection.Input;
                p_State.DbType = DbType.Byte;
                p_State.Size = 1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[ChangeDeliveryStatusIncomingMessage] @MessageId, @State";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_MessageId , p_State );

            //Return
        }

        public void ChangeTableProperty(string ObjectName,string PropertyName,string PropertyValue)
        {

                // Parameters
                SqlParameter p_ObjectName = new SqlParameter("@ObjectName", ObjectName ?? (object)DBNull.Value);
                p_ObjectName.Direction = ParameterDirection.Input;
                p_ObjectName.DbType = DbType.String;
                p_ObjectName.Size = 256;

                SqlParameter p_PropertyName = new SqlParameter("@PropertyName", PropertyName ?? (object)DBNull.Value);
                p_PropertyName.Direction = ParameterDirection.Input;
                p_PropertyName.DbType = DbType.String;
                p_PropertyName.Size = 256;

                SqlParameter p_PropertyValue = new SqlParameter("@PropertyValue", PropertyValue ?? (object)DBNull.Value);
                p_PropertyValue.Direction = ParameterDirection.Input;
                p_PropertyValue.DbType = DbType.String;
                p_PropertyValue.Size = 2048;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[ChangeTableProperty] @ObjectName, @PropertyName, @PropertyValue";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_ObjectName , p_PropertyName , p_PropertyValue );

            //Return
        }

        public void EXPOSE_dm_FileWz_Create(string FileName,int? Filetype,decimal? FileSize,int? UserId, int? Id)
        {

                // Parameters
                SqlParameter p_FileName = new SqlParameter("@FileName", FileName ?? (object)DBNull.Value);
                p_FileName.Direction = ParameterDirection.Input;
                p_FileName.DbType = DbType.String;
                p_FileName.Size = 100;

                SqlParameter p_Filetype = new SqlParameter("@Filetype", Filetype ?? (object)DBNull.Value);
                p_Filetype.Direction = ParameterDirection.Input;
                p_Filetype.DbType = DbType.Int32;
                p_Filetype.Size = 4;

                SqlParameter p_FileSize = new SqlParameter("@FileSize", FileSize ?? (object)DBNull.Value);
                p_FileSize.Direction = ParameterDirection.Input;
                p_FileSize.DbType = DbType.Decimal;
                p_FileSize.Size = 9;

                SqlParameter p_UserId = new SqlParameter("@UserId", UserId ?? (object)DBNull.Value);
                p_UserId.Direction = ParameterDirection.Input;
                p_UserId.DbType = DbType.Int32;
                p_UserId.Size = 4;

                SqlParameter p_Id = new SqlParameter("@Id", Id ?? (object)DBNull.Value);
                p_Id.Direction = ParameterDirection.Output;
                p_Id.DbType = DbType.Int32;
                p_Id.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_FileWz_Create] @FileName, @Filetype, @FileSize, @UserId, @Id OUTPUT";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_FileName , p_Filetype , p_FileSize , p_UserId , p_Id );
                
                //Output Params
                Id = (int?)p_Id.Value;

            //Return
        }

        public void EXPOSE_dm_OrderArchievum_InsertToOrderArchievum(int? WzMagazynId)
        {

                // Parameters
                SqlParameter p_WzMagazynId = new SqlParameter("@WzMagazynId", WzMagazynId ?? (object)DBNull.Value);
                p_WzMagazynId.Direction = ParameterDirection.Input;
                p_WzMagazynId.DbType = DbType.Int32;
                p_WzMagazynId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderArchievum_InsertToOrderArchievum] @WzMagazynId";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_WzMagazynId );

            //Return
        }

        public async Task<List<EXPOSE_dm_OrderArchievum_SelectingALLFormAchievumResult>> EXPOSE_dm_OrderArchievum_SelectingALLFormAchievumAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_OrderArchievum_SelectingALLFormAchievumResult> lst = new List<EXPOSE_dm_OrderArchievum_SelectingALLFormAchievumResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderArchievum_SelectingALLFormAchievum] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_OrderArchievum_SelectingALLFormAchievum.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_OrderProducts_CreateOrderToOrderProducts(int? OrderId)
        {

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderProducts_CreateOrderToOrderProducts] @OrderId";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_OrderId );

            //Return
        }

        public async Task<List<EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuResult>> EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuAsync(int? ProductId)
        {
            //Initialize Result 
            List<EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuResult> lst = new List<EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuResult>();

                // Parameters
                SqlParameter p_ProductId = new SqlParameter("@ProductId", ProductId ?? (object)DBNull.Value);
                p_ProductId.Direction = ParameterDirection.Input;
                p_ProductId.DbType = DbType.Int32;
                p_ProductId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderProducts_DetailProductListStanMagazynu] @ProductId";
                
                //Output Data
                lst = await this.EXPOSE_dm_OrderProducts_DetailProductListStanMagazynu.FromSqlRaw(sqlQuery , p_ProductId ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_OrderProducts_GetOrderDetailResult>> EXPOSE_dm_OrderProducts_GetOrderDetailAsync(int? OrderId)
        {
            //Initialize Result 
            List<EXPOSE_dm_OrderProducts_GetOrderDetailResult> lst = new List<EXPOSE_dm_OrderProducts_GetOrderDetailResult>();

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderProducts_GetOrderDetail] @OrderId";
                
                //Output Data
                lst = await this.EXPOSE_dm_OrderProducts_GetOrderDetail.FromSqlRaw(sqlQuery , p_OrderId ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_OrderProducts_InsertingOrderIdProductsId(int? OrderId,int? ProductId,int? Amount,int? SizeId,int? ProductStatusId,int? SenderId,int? RecieverId,bool? is_removed)
        {

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;

                SqlParameter p_ProductId = new SqlParameter("@ProductId", ProductId ?? (object)DBNull.Value);
                p_ProductId.Direction = ParameterDirection.Input;
                p_ProductId.DbType = DbType.Int32;
                p_ProductId.Size = 4;

                SqlParameter p_Amount = new SqlParameter("@Amount", Amount ?? (object)DBNull.Value);
                p_Amount.Direction = ParameterDirection.Input;
                p_Amount.DbType = DbType.Int32;
                p_Amount.Size = 4;

                SqlParameter p_SizeId = new SqlParameter("@SizeId", SizeId ?? (object)DBNull.Value);
                p_SizeId.Direction = ParameterDirection.Input;
                p_SizeId.DbType = DbType.Int32;
                p_SizeId.Size = 4;

                SqlParameter p_ProductStatusId = new SqlParameter("@ProductStatusId", ProductStatusId ?? (object)DBNull.Value);
                p_ProductStatusId.Direction = ParameterDirection.Input;
                p_ProductStatusId.DbType = DbType.Int32;
                p_ProductStatusId.Size = 4;

                SqlParameter p_SenderId = new SqlParameter("@SenderId", SenderId ?? (object)DBNull.Value);
                p_SenderId.Direction = ParameterDirection.Input;
                p_SenderId.DbType = DbType.Int32;
                p_SenderId.Size = 4;

                SqlParameter p_RecieverId = new SqlParameter("@RecieverId", RecieverId ?? (object)DBNull.Value);
                p_RecieverId.Direction = ParameterDirection.Input;
                p_RecieverId.DbType = DbType.Int32;
                p_RecieverId.Size = 4;

                SqlParameter p_is_removed = new SqlParameter("@is_removed", is_removed ?? (object)DBNull.Value);
                p_is_removed.Direction = ParameterDirection.Input;
                p_is_removed.DbType = DbType.Boolean;
                p_is_removed.Size = 1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderProducts_InsertingOrderIdProductsId] @OrderId, @ProductId, @Amount, @SizeId, @ProductStatusId, @SenderId, @RecieverId, @is_removed";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_OrderId , p_ProductId , p_Amount , p_SizeId , p_ProductStatusId , p_SenderId , p_RecieverId , p_is_removed );

            //Return
        }

        public async Task<List<EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderResult>> EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderAsync(int? OrderId)
        {
            //Initialize Result 
            List<EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderResult> lst = new List<EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderResult>();

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderProducts_OpenningTheSpecificOrder] @OrderId";
                
                //Output Data
                lst = await this.EXPOSE_dm_OrderProducts_OpenningTheSpecificOrder.FromSqlRaw(sqlQuery , p_OrderId ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_OrderProducts_PersonalWzDetailsResult>> EXPOSE_dm_OrderProducts_PersonalWzDetailsAsync(int? OrderId)
        {
            //Initialize Result 
            List<EXPOSE_dm_OrderProducts_PersonalWzDetailsResult> lst = new List<EXPOSE_dm_OrderProducts_PersonalWzDetailsResult>();

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderProducts_PersonalWzDetails] @OrderId";
                
                //Output Data
                lst = await this.EXPOSE_dm_OrderProducts_PersonalWzDetails.FromSqlRaw(sqlQuery , p_OrderId ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_OrderProducts_SelectingProductsAfterScanningResult>> EXPOSE_dm_OrderProducts_SelectingProductsAfterScanningAsync(int? OrderId)
        {
            //Initialize Result 
            List<EXPOSE_dm_OrderProducts_SelectingProductsAfterScanningResult> lst = new List<EXPOSE_dm_OrderProducts_SelectingProductsAfterScanningResult>();

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderProducts_SelectingProductsAfterScanning] @OrderId";
                
                //Output Data
                lst = await this.EXPOSE_dm_OrderProducts_SelectingProductsAfterScanning.FromSqlRaw(sqlQuery , p_OrderId ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_Orders_CreateOrder(DateTime? CraeteAt,DateTime? UpdatedAt,int? CategoryId,int? OrderStatusId,int? FileWzId,int? SizeId,bool? Is_removed,DateTime? ImplementationDate,int? Amount,string SourceOfOrder,int? SenderId,int? ProductId)
        {

                // Parameters
                SqlParameter p_CraeteAt = new SqlParameter("@CraeteAt", CraeteAt ?? (object)DBNull.Value);
                p_CraeteAt.Direction = ParameterDirection.Input;
                p_CraeteAt.DbType = DbType.DateTime;
                p_CraeteAt.Size = 3;

                SqlParameter p_UpdatedAt = new SqlParameter("@UpdatedAt", UpdatedAt ?? (object)DBNull.Value);
                p_UpdatedAt.Direction = ParameterDirection.Input;
                p_UpdatedAt.DbType = DbType.DateTime;
                p_UpdatedAt.Size = 3;

                SqlParameter p_CategoryId = new SqlParameter("@CategoryId", CategoryId ?? (object)DBNull.Value);
                p_CategoryId.Direction = ParameterDirection.Input;
                p_CategoryId.DbType = DbType.Int32;
                p_CategoryId.Size = 4;

                SqlParameter p_OrderStatusId = new SqlParameter("@OrderStatusId", OrderStatusId ?? (object)DBNull.Value);
                p_OrderStatusId.Direction = ParameterDirection.Input;
                p_OrderStatusId.DbType = DbType.Int32;
                p_OrderStatusId.Size = 4;

                SqlParameter p_FileWzId = new SqlParameter("@FileWzId", FileWzId ?? (object)DBNull.Value);
                p_FileWzId.Direction = ParameterDirection.Input;
                p_FileWzId.DbType = DbType.Int32;
                p_FileWzId.Size = 4;

                SqlParameter p_SizeId = new SqlParameter("@SizeId", SizeId ?? (object)DBNull.Value);
                p_SizeId.Direction = ParameterDirection.Input;
                p_SizeId.DbType = DbType.Int32;
                p_SizeId.Size = 4;

                SqlParameter p_Is_removed = new SqlParameter("@Is_removed", Is_removed ?? (object)DBNull.Value);
                p_Is_removed.Direction = ParameterDirection.Input;
                p_Is_removed.DbType = DbType.Boolean;
                p_Is_removed.Size = 1;

                SqlParameter p_ImplementationDate = new SqlParameter("@ImplementationDate", ImplementationDate ?? (object)DBNull.Value);
                p_ImplementationDate.Direction = ParameterDirection.Input;
                p_ImplementationDate.DbType = DbType.DateTime;
                p_ImplementationDate.Size = 3;

                SqlParameter p_Amount = new SqlParameter("@Amount", Amount ?? (object)DBNull.Value);
                p_Amount.Direction = ParameterDirection.Input;
                p_Amount.DbType = DbType.Int32;
                p_Amount.Size = 4;

                SqlParameter p_SourceOfOrder = new SqlParameter("@SourceOfOrder", SourceOfOrder ?? (object)DBNull.Value);
                p_SourceOfOrder.Direction = ParameterDirection.Input;
                p_SourceOfOrder.DbType = DbType.String;
                p_SourceOfOrder.Size = 100;

                SqlParameter p_SenderId = new SqlParameter("@SenderId", SenderId ?? (object)DBNull.Value);
                p_SenderId.Direction = ParameterDirection.Input;
                p_SenderId.DbType = DbType.Int32;
                p_SenderId.Size = 4;

                SqlParameter p_ProductId = new SqlParameter("@ProductId", ProductId ?? (object)DBNull.Value);
                p_ProductId.Direction = ParameterDirection.Input;
                p_ProductId.DbType = DbType.Int32;
                p_ProductId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_CreateOrder] @CraeteAt, @UpdatedAt, @CategoryId, @OrderStatusId, @FileWzId, @SizeId, @Is_removed, @ImplementationDate, @Amount, @SourceOfOrder, @SenderId, @ProductId";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_CraeteAt , p_UpdatedAt , p_CategoryId , p_OrderStatusId , p_FileWzId , p_SizeId , p_Is_removed , p_ImplementationDate , p_Amount , p_SourceOfOrder , p_SenderId , p_ProductId );

            //Return
        }

        public async Task<List<EXPOSE_dm_Orders_SelectingAllNewOrdersResult>> EXPOSE_dm_Orders_SelectingAllNewOrdersAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_Orders_SelectingAllNewOrdersResult> lst = new List<EXPOSE_dm_Orders_SelectingAllNewOrdersResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_SelectingAllNewOrders] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_Orders_SelectingAllNewOrders.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_Orders_Update(int? OrderId)
        {

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_Update] @OrderId";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_OrderId );

            //Return
        }

        public void EXPOSE_dm_Products_CreateProduct(string SKUnumber,string ProductName,int? SizeId,int? Amount,string Gtin,int? CategoryId)
        {

                // Parameters
                SqlParameter p_SKUnumber = new SqlParameter("@SKUnumber", SKUnumber ?? (object)DBNull.Value);
                p_SKUnumber.Direction = ParameterDirection.Input;
                p_SKUnumber.DbType = DbType.String;
                p_SKUnumber.Size = 100;

                SqlParameter p_ProductName = new SqlParameter("@ProductName", ProductName ?? (object)DBNull.Value);
                p_ProductName.Direction = ParameterDirection.Input;
                p_ProductName.DbType = DbType.String;
                p_ProductName.Size = 100;

                SqlParameter p_SizeId = new SqlParameter("@SizeId", SizeId ?? (object)DBNull.Value);
                p_SizeId.Direction = ParameterDirection.Input;
                p_SizeId.DbType = DbType.Int32;
                p_SizeId.Size = 4;

                SqlParameter p_Amount = new SqlParameter("@Amount", Amount ?? (object)DBNull.Value);
                p_Amount.Direction = ParameterDirection.Input;
                p_Amount.DbType = DbType.Int32;
                p_Amount.Size = 4;

                SqlParameter p_Gtin = new SqlParameter("@Gtin", Gtin ?? (object)DBNull.Value);
                p_Gtin.Direction = ParameterDirection.Input;
                p_Gtin.DbType = DbType.String;
                p_Gtin.Size = 100;

                SqlParameter p_CategoryId = new SqlParameter("@CategoryId", CategoryId ?? (object)DBNull.Value);
                p_CategoryId.Direction = ParameterDirection.Input;
                p_CategoryId.DbType = DbType.Int32;
                p_CategoryId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Products_CreateProduct] @SKUnumber, @ProductName, @SizeId, @Amount, @Gtin, @CategoryId";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_SKUnumber , p_ProductName , p_SizeId , p_Amount , p_Gtin , p_CategoryId );

            //Return
        }

        public void EXPOSE_dm_Products_ScanningForAddingProduct(string SKU,string ProductName,string Gtin,int? SizeId,int? Amount,int? CategoryId)
        {

                // Parameters
                SqlParameter p_SKU = new SqlParameter("@SKU", SKU ?? (object)DBNull.Value);
                p_SKU.Direction = ParameterDirection.Input;
                p_SKU.DbType = DbType.String;
                p_SKU.Size = 100;

                SqlParameter p_ProductName = new SqlParameter("@ProductName", ProductName ?? (object)DBNull.Value);
                p_ProductName.Direction = ParameterDirection.Input;
                p_ProductName.DbType = DbType.String;
                p_ProductName.Size = 100;

                SqlParameter p_Gtin = new SqlParameter("@Gtin", Gtin ?? (object)DBNull.Value);
                p_Gtin.Direction = ParameterDirection.Input;
                p_Gtin.DbType = DbType.String;
                p_Gtin.Size = 100;

                SqlParameter p_SizeId = new SqlParameter("@SizeId", SizeId ?? (object)DBNull.Value);
                p_SizeId.Direction = ParameterDirection.Input;
                p_SizeId.DbType = DbType.Int32;
                p_SizeId.Size = 4;

                SqlParameter p_Amount = new SqlParameter("@Amount", Amount ?? (object)DBNull.Value);
                p_Amount.Direction = ParameterDirection.Input;
                p_Amount.DbType = DbType.Int32;
                p_Amount.Size = 4;

                SqlParameter p_CategoryId = new SqlParameter("@CategoryId", CategoryId ?? (object)DBNull.Value);
                p_CategoryId.Direction = ParameterDirection.Input;
                p_CategoryId.DbType = DbType.Int32;
                p_CategoryId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Products_ScanningForAddingProduct] @SKU, @ProductName, @Gtin, @SizeId, @Amount, @CategoryId";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_SKU , p_ProductName , p_Gtin , p_SizeId , p_Amount , p_CategoryId );

            //Return
        }

        public async Task<List<EXPOSE_dm_Products_SearchingByNameCategoryAndSizeResult>> EXPOSE_dm_Products_SearchingByNameCategoryAndSizeAsync(string ProductName,string CategoryName,string Size)
        {
            //Initialize Result 
            List<EXPOSE_dm_Products_SearchingByNameCategoryAndSizeResult> lst = new List<EXPOSE_dm_Products_SearchingByNameCategoryAndSizeResult>();

                // Parameters
                SqlParameter p_ProductName = new SqlParameter("@ProductName", ProductName ?? (object)DBNull.Value);
                p_ProductName.Direction = ParameterDirection.Input;
                p_ProductName.DbType = DbType.String;
                p_ProductName.Size = 100;

                SqlParameter p_CategoryName = new SqlParameter("@CategoryName", CategoryName ?? (object)DBNull.Value);
                p_CategoryName.Direction = ParameterDirection.Input;
                p_CategoryName.DbType = DbType.String;
                p_CategoryName.Size = 100;

                SqlParameter p_Size = new SqlParameter("@Size", Size ?? (object)DBNull.Value);
                p_Size.Direction = ParameterDirection.Input;
                p_Size.DbType = DbType.String;
                p_Size.Size = 100;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Products_SearchingByNameCategoryAndSize] @ProductName, @CategoryName, @Size";
                
                //Output Data
                lst = await this.EXPOSE_dm_Products_SearchingByNameCategoryAndSize.FromSqlRaw(sqlQuery , p_ProductName , p_CategoryName , p_Size ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Products_SelectingCurrentOrderByStatusResult>> EXPOSE_dm_Products_SelectingCurrentOrderByStatusAsync(int? OrderId)
        {
            //Initialize Result 
            List<EXPOSE_dm_Products_SelectingCurrentOrderByStatusResult> lst = new List<EXPOSE_dm_Products_SelectingCurrentOrderByStatusResult>();

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Products_SelectingCurrentOrderByStatus] @OrderId";
                
                //Output Data
                lst = await this.EXPOSE_dm_Products_SelectingCurrentOrderByStatus.FromSqlRaw(sqlQuery , p_OrderId ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Products_SelectingProductGtinResult>> EXPOSE_dm_Products_SelectingProductGtinAsync(int? ProductId)
        {
            //Initialize Result 
            List<EXPOSE_dm_Products_SelectingProductGtinResult> lst = new List<EXPOSE_dm_Products_SelectingProductGtinResult>();

                // Parameters
                SqlParameter p_ProductId = new SqlParameter("@ProductId", ProductId ?? (object)DBNull.Value);
                p_ProductId.Direction = ParameterDirection.Input;
                p_ProductId.DbType = DbType.Int32;
                p_ProductId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Products_SelectingProductGtin] @ProductId";
                
                //Output Data
                lst = await this.EXPOSE_dm_Products_SelectingProductGtin.FromSqlRaw(sqlQuery , p_ProductId ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_Products_UpdatingWhileScanningBySKUCode(string SKU)
        {

                // Parameters
                SqlParameter p_SKU = new SqlParameter("@SKU", SKU ?? (object)DBNull.Value);
                p_SKU.Direction = ParameterDirection.Input;
                p_SKU.DbType = DbType.String;
                p_SKU.Size = 100;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Products_UpdatingWhileScanningBySKUCode] @SKU";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_SKU );

            //Return
        }

        public async Task<List<EXPOSE_dm_WzMagazyn_ListOfWzOrdersInWZMAGAZYNResult>> EXPOSE_dm_WzMagazyn_ListOfWzOrdersInWZMAGAZYNAsync(int? WzMagazynId)
        {
            //Initialize Result 
            List<EXPOSE_dm_WzMagazyn_ListOfWzOrdersInWZMAGAZYNResult> lst = new List<EXPOSE_dm_WzMagazyn_ListOfWzOrdersInWZMAGAZYNResult>();

                // Parameters
                SqlParameter p_WzMagazynId = new SqlParameter("@WzMagazynId", WzMagazynId ?? (object)DBNull.Value);
                p_WzMagazynId.Direction = ParameterDirection.Input;
                p_WzMagazynId.DbType = DbType.Int32;
                p_WzMagazynId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_WzMagazyn_ListOfWzOrdersInWZMAGAZYN] @WzMagazynId";
                
                //Output Data
                lst = await this.EXPOSE_dm_WzMagazyn_ListOfWzOrdersInWZMAGAZYN.FromSqlRaw(sqlQuery , p_WzMagazynId ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_WzMagazyn_SendingOrderToMagazyn(int? OrderProductId)
        {

                // Parameters
                SqlParameter p_OrderProductId = new SqlParameter("@OrderProductId", OrderProductId ?? (object)DBNull.Value);
                p_OrderProductId.Direction = ParameterDirection.Input;
                p_OrderProductId.DbType = DbType.Int32;
                p_OrderProductId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_WzMagazyn_SendingOrderToMagazyn] @OrderProductId";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_OrderProductId );

            //Return
        }

        public void EXPOSE_dm_WzMagazyn_UpdateProductAmountInStanMagazynu(int? WzMagazynId,int? Amount)
        {

                // Parameters
                SqlParameter p_WzMagazynId = new SqlParameter("@WzMagazynId", WzMagazynId ?? (object)DBNull.Value);
                p_WzMagazynId.Direction = ParameterDirection.Input;
                p_WzMagazynId.DbType = DbType.Int32;
                p_WzMagazynId.Size = 4;

                SqlParameter p_Amount = new SqlParameter("@Amount", Amount ?? (object)DBNull.Value);
                p_Amount.Direction = ParameterDirection.Input;
                p_Amount.DbType = DbType.Int32;
                p_Amount.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_WzMagazyn_UpdateProductAmountInStanMagazynu] @WzMagazynId, @Amount";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_WzMagazynId , p_Amount );

            //Return
        }

        public void FixExtendedProperties()
        {


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[FixExtendedProperties] ";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery );

            //Return
        }

        public void GetLinkedEntities(string table,string linkEntity,int? id)
        {

                // Parameters
                SqlParameter p_table = new SqlParameter("@table", table ?? (object)DBNull.Value);
                p_table.Direction = ParameterDirection.Input;
                p_table.DbType = DbType.String;
                p_table.Size = 256;

                SqlParameter p_linkEntity = new SqlParameter("@linkEntity", linkEntity ?? (object)DBNull.Value);
                p_linkEntity.Direction = ParameterDirection.Input;
                p_linkEntity.DbType = DbType.String;
                p_linkEntity.Size = 256;

                SqlParameter p_id = new SqlParameter("@id", id ?? (object)DBNull.Value);
                p_id.Direction = ParameterDirection.Input;
                p_id.DbType = DbType.Int32;
                p_id.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[GetLinkedEntities] @table, @linkEntity, @id";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_table , p_linkEntity , p_id );

            //Return
        }

        public async Task<List<SaveMessageResult>> SaveMessageAsync(string MessageId,string ParentId,string Author,string Payload,string Comment,bool? Offline)
        {
            //Initialize Result 
            List<SaveMessageResult> lst = new List<SaveMessageResult>();

                // Parameters
                SqlParameter p_MessageId = new SqlParameter("@MessageId", MessageId ?? (object)DBNull.Value);
                p_MessageId.Direction = ParameterDirection.Input;
                p_MessageId.DbType = DbType.String;
                p_MessageId.Size = 1024;

                SqlParameter p_ParentId = new SqlParameter("@ParentId", ParentId ?? (object)DBNull.Value);
                p_ParentId.Direction = ParameterDirection.Input;
                p_ParentId.DbType = DbType.String;
                p_ParentId.Size = 1024;

                SqlParameter p_Author = new SqlParameter("@Author", Author ?? (object)DBNull.Value);
                p_Author.Direction = ParameterDirection.Input;
                p_Author.DbType = DbType.String;
                p_Author.Size = 1024;

                SqlParameter p_Payload = new SqlParameter("@Payload", Payload ?? (object)DBNull.Value);
                p_Payload.Direction = ParameterDirection.Input;
                p_Payload.DbType = DbType.String;
                p_Payload.Size = -1;

                SqlParameter p_Comment = new SqlParameter("@Comment", Comment ?? (object)DBNull.Value);
                p_Comment.Direction = ParameterDirection.Input;
                p_Comment.DbType = DbType.String;
                p_Comment.Size = 2048;

                SqlParameter p_Offline = new SqlParameter("@Offline", Offline ?? (object)DBNull.Value);
                p_Offline.Direction = ParameterDirection.Input;
                p_Offline.DbType = DbType.Boolean;
                p_Offline.Size = 1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[SaveMessage] @MessageId, @ParentId, @Author, @Payload, @Comment, @Offline";
                
                //Output Data
                lst = await this.SaveMessage.FromSqlRaw(sqlQuery , p_MessageId , p_ParentId , p_Author , p_Payload , p_Comment , p_Offline ).ToListAsync();

            //Return
            return lst;
        }

        public void SaveMessageDeliveryReport(int? ID,Byte? Result,string MessageID)
        {

                // Parameters
                SqlParameter p_ID = new SqlParameter("@ID", ID ?? (object)DBNull.Value);
                p_ID.Direction = ParameterDirection.Input;
                p_ID.DbType = DbType.Int32;
                p_ID.Size = 4;

                SqlParameter p_Result = new SqlParameter("@Result", Result ?? (object)DBNull.Value);
                p_Result.Direction = ParameterDirection.Input;
                p_Result.DbType = DbType.Byte;
                p_Result.Size = 1;

                SqlParameter p_MessageID = new SqlParameter("@MessageID", MessageID ?? (object)DBNull.Value);
                p_MessageID.Direction = ParameterDirection.Input;
                p_MessageID.DbType = DbType.String;
                p_MessageID.Size = 1024;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[SaveMessageDeliveryReport] @ID, @Result, @MessageID";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_ID , p_Result , p_MessageID );

            //Return
        }

        public async Task<List<SaveOutgoingMessageResult>> SaveOutgoingMessageAsync(string Destination,string Payload,bool? NoAuto,string Comment)
        {
            //Initialize Result 
            List<SaveOutgoingMessageResult> lst = new List<SaveOutgoingMessageResult>();

                // Parameters
                SqlParameter p_Destination = new SqlParameter("@Destination", Destination ?? (object)DBNull.Value);
                p_Destination.Direction = ParameterDirection.Input;
                p_Destination.DbType = DbType.String;
                p_Destination.Size = 1024;

                SqlParameter p_Payload = new SqlParameter("@Payload", Payload ?? (object)DBNull.Value);
                p_Payload.Direction = ParameterDirection.Input;
                p_Payload.DbType = DbType.String;
                p_Payload.Size = -1;

                SqlParameter p_NoAuto = new SqlParameter("@NoAuto", NoAuto ?? (object)DBNull.Value);
                p_NoAuto.Direction = ParameterDirection.Input;
                p_NoAuto.DbType = DbType.Boolean;
                p_NoAuto.Size = 1;

                SqlParameter p_Comment = new SqlParameter("@Comment", Comment ?? (object)DBNull.Value);
                p_Comment.Direction = ParameterDirection.Input;
                p_Comment.DbType = DbType.String;
                p_Comment.Size = 2048;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[SaveOutgoingMessage] @Destination, @Payload, @NoAuto, @Comment";
                
                //Output Data
                lst = await this.SaveOutgoingMessage.FromSqlRaw(sqlQuery , p_Destination , p_Payload , p_NoAuto , p_Comment ).ToListAsync();

            //Return
            return lst;
        }

        public void WriteLog(int? UserId,string EntityName,int? EntityId,Byte? ActionType,bool? Success,string Info)
        {

                // Parameters
                SqlParameter p_UserId = new SqlParameter("@UserId", UserId ?? (object)DBNull.Value);
                p_UserId.Direction = ParameterDirection.Input;
                p_UserId.DbType = DbType.Int32;
                p_UserId.Size = 4;

                SqlParameter p_EntityName = new SqlParameter("@EntityName", EntityName ?? (object)DBNull.Value);
                p_EntityName.Direction = ParameterDirection.Input;
                p_EntityName.DbType = DbType.String;
                p_EntityName.Size = 512;

                SqlParameter p_EntityId = new SqlParameter("@EntityId", EntityId ?? (object)DBNull.Value);
                p_EntityId.Direction = ParameterDirection.Input;
                p_EntityId.DbType = DbType.Int32;
                p_EntityId.Size = 4;

                SqlParameter p_ActionType = new SqlParameter("@ActionType", ActionType ?? (object)DBNull.Value);
                p_ActionType.Direction = ParameterDirection.Input;
                p_ActionType.DbType = DbType.Byte;
                p_ActionType.Size = 1;

                SqlParameter p_Success = new SqlParameter("@Success", Success ?? (object)DBNull.Value);
                p_Success.Direction = ParameterDirection.Input;
                p_Success.DbType = DbType.Boolean;
                p_Success.Size = 1;

                SqlParameter p_Info = new SqlParameter("@Info", Info ?? (object)DBNull.Value);
                p_Info.Direction = ParameterDirection.Input;
                p_Info.DbType = DbType.String;
                p_Info.Size = -1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[WriteLog] @UserId, @EntityName, @EntityId, @ActionType, @Success, @Info";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_UserId , p_EntityName , p_EntityId , p_ActionType , p_Success , p_Info );

            //Return
        }

        public void WriteLogWithTime(int? UserId,string EntityName,int? EntityId,Byte? ActionType,bool? Success,string Info,DateTime? TimeStart,DateTime? TimeFinish)
        {

                // Parameters
                SqlParameter p_UserId = new SqlParameter("@UserId", UserId ?? (object)DBNull.Value);
                p_UserId.Direction = ParameterDirection.Input;
                p_UserId.DbType = DbType.Int32;
                p_UserId.Size = 4;

                SqlParameter p_EntityName = new SqlParameter("@EntityName", EntityName ?? (object)DBNull.Value);
                p_EntityName.Direction = ParameterDirection.Input;
                p_EntityName.DbType = DbType.String;
                p_EntityName.Size = 512;

                SqlParameter p_EntityId = new SqlParameter("@EntityId", EntityId ?? (object)DBNull.Value);
                p_EntityId.Direction = ParameterDirection.Input;
                p_EntityId.DbType = DbType.Int32;
                p_EntityId.Size = 4;

                SqlParameter p_ActionType = new SqlParameter("@ActionType", ActionType ?? (object)DBNull.Value);
                p_ActionType.Direction = ParameterDirection.Input;
                p_ActionType.DbType = DbType.Byte;
                p_ActionType.Size = 1;

                SqlParameter p_Success = new SqlParameter("@Success", Success ?? (object)DBNull.Value);
                p_Success.Direction = ParameterDirection.Input;
                p_Success.DbType = DbType.Boolean;
                p_Success.Size = 1;

                SqlParameter p_Info = new SqlParameter("@Info", Info ?? (object)DBNull.Value);
                p_Info.Direction = ParameterDirection.Input;
                p_Info.DbType = DbType.String;
                p_Info.Size = -1;

                SqlParameter p_TimeStart = new SqlParameter("@TimeStart", TimeStart ?? (object)DBNull.Value);
                p_TimeStart.Direction = ParameterDirection.Input;
                p_TimeStart.DbType = DbType.DateTime;
                p_TimeStart.Size = 8;

                SqlParameter p_TimeFinish = new SqlParameter("@TimeFinish", TimeFinish ?? (object)DBNull.Value);
                p_TimeFinish.Direction = ParameterDirection.Input;
                p_TimeFinish.DbType = DbType.DateTime;
                p_TimeFinish.Size = 8;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[WriteLogWithTime] @UserId, @EntityName, @EntityId, @ActionType, @Success, @Info, @TimeStart, @TimeFinish";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_UserId , p_EntityName , p_EntityId , p_ActionType , p_Success , p_Info , p_TimeStart , p_TimeFinish );

            //Return
        }


        public class EXPOSE_dm_OrderArchievum_SelectingALLFormAchievumResult
        {
            public int? Id { get; set; }
            public DateTime? CreateAt { get; set; }
            public string Sender { get; set; }
            public string Reciever { get; set; }
            public int? Amount { get; set; }
            public DateTime? ImplementationDate { get; set; }
        }

        public class EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuResult
        {
            public string SKUnumber { get; set; }
            public string ProductName { get; set; }
            public string CategoryName { get; set; }
            public string Size { get; set; }
            public int? Amount { get; set; }
        }

        public class EXPOSE_dm_OrderProducts_GetOrderDetailResult
        {
            public string SKUnumber { get; set; }
            public string ProductName { get; set; }
            public string CategoryName { get; set; }
            public string Size { get; set; }
        }

        public class EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderResult
        {
            public string SKUnumber { get; set; }
            public string ProductName { get; set; }
            public string CategoryName { get; set; }
            public string Size { get; set; }
        }

        public class EXPOSE_dm_OrderProducts_PersonalWzDetailsResult
        {
            public int? Id { get; set; }
            public string ProductName { get; set; }
            public string Sender { get; set; }
            public DateTime? CreateAt { get; set; }
        }

        public class EXPOSE_dm_OrderProducts_SelectingProductsAfterScanningResult
        {
            public string SKUnumber { get; set; }
            public string ProductName { get; set; }
            public string CategoryName { get; set; }
            public string Size { get; set; }
        }

        public class EXPOSE_dm_Orders_SelectingAllNewOrdersResult
        {
            public int? FileWzId { get; set; }
            public DateTime? CreateAt { get; set; }
            public int? Amount { get; set; }
            public string SourceOfOrder { get; set; }
        }

        public class EXPOSE_dm_Products_SearchingByNameCategoryAndSizeResult
        {
            public string ProductName { get; set; }
            public string CategoryName { get; set; }
            public string Size { get; set; }
        }

        public class EXPOSE_dm_Products_SelectingCurrentOrderByStatusResult
        {
            public string SKUnumber { get; set; }
            public string ProductName { get; set; }
            public string CategoryName { get; set; }
            public string Size { get; set; }
            public string StatusDescription { get; set; }
        }

        public class EXPOSE_dm_Products_SelectingProductGtinResult
        {
            public string ProductName { get; set; }
            public string Size { get; set; }
            public string CategoryName { get; set; }
            public string GTIN { get; set; }
        }

        public class EXPOSE_dm_WzMagazyn_ListOfWzOrdersInWZMAGAZYNResult
        {
            public int? Id { get; set; }
            public DateTime CreatedAt { get; set; }
            public string OrderStatusName { get; set; }
            public string ProductName { get; set; }
            public int Amount { get; set; }
            public string Sender { get; set; }
            public string Reciever { get; set; }
        }

        public class SaveMessageResult
        {
            public int? Col0 { get; set; }
        }

        public class SaveOutgoingMessageResult
        {
            public decimal? Col0 { get; set; }
        }

    }
}